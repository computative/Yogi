import numpy as np
import scipy
from hamiltonian import Hamiltonian
from ase.lattice.cubic import Diamond

if __name__ == "__main__":

    atoms = Diamond(
        directions=[[1,0,0], [0,1,0], [0,0,1]],
        symbol='Si',
        size=(1, 1, 1),
        latticeconstant=5.431,
        pbc=True
    )

    bowler = {  "Es": -12.2, "Ep": -5.75, 
                "ss-sigma": -1.938, "sp-sigma": 1.745,
                "pp-sigma": 3.050, "pp-pi": -1.075 }
    gsp = {"r0": 2.35, "rc": 3.8661,"n": 1.9771,"nc": 6.8702 }
    basis = ["1s","2px","2py","2pz"]
    hamiltonian = Hamiltonian(atoms, basis, bowler, gsp)

    from visualtools import VisualTools
    
    test_vals = []
    a1,a2,a3 = atoms.cell[:]
    sympts = VisualTools.fcc_sympts(*VisualTools.reciprocal(a1,a2,a3))

    for k in [sympts["K"], sympts["Gamma"],sympts["L"]]:
        HMatrix = hamiltonian( k )
        if not scipy.linalg.ishermitian(HMatrix, atol=1e-10):
            raise(RuntimeError("Hamiltonian nonhermitian"))
        test_vals.append(np.linalg.eigvalsh( HMatrix, "L"))

ref_vals = [np.array([-20.17003201, -16.2959485 , -16.2959485 , -14.60158697,
               -13.23693951, -11.85837186, -11.85837186, -11.75565801,
               -10.97780453, -10.97780453, -10.21889701, -10.21287628,
               -10.21287628,  -9.1030098 ,  -8.78065644,  -7.2221371 ,
                -5.60343447,  -4.72455959,  -4.55367011,  -4.55367011,
                -3.78528457,  -3.78528457,  -3.56219665,  -3.31815092,
                -3.02492946,  -2.40549137,  -0.58592291,  -0.58592291,
                -0.50490946,  -0.37626052,  -0.37626052,  -0.07513269]),
        np.array([-2.13848214e+01, -1.39072609e+01, -1.39072609e+01, -1.39072609e+01,
               -1.39072609e+01, -1.39072609e+01, -1.39072609e+01, -1.09696366e+01,
               -1.09696366e+01, -1.09696366e+01, -1.09696366e+01, -1.09696366e+01,
               -1.09696366e+01, -6.73157805e+00, -6.73157805e+00, -6.73157805e+00,
               -5.85900579e+00, -4.32820103e+00, -4.32820103e+00, -4.32820103e+00,
               -4.31469784e+00, -4.31469784e+00, -4.31469784e+00, -4.31469784e+00,
               -4.31469784e+00, -4.31469784e+00, -4.54400974e-03, -4.54400974e-03,
               -4.54400974e-03, -4.54400974e-03, -4.54400974e-03, -4.54400974e-03]),
        np.array([-16.86662481, -16.86662481, -16.86662481, -16.86662481,
               -13.86180174, -13.86180174, -13.86180174, -13.86180174,
                -8.59179141,  -8.59179141,  -8.59179141,  -8.59179141,
                -8.59179141,  -8.59179141,  -8.59179141,  -8.59179141,
                -6.14122212,  -6.14122212,  -6.14122212,  -6.14122212,
                -1.89936898,  -1.89936898,  -1.89936898,  -1.89936898,
                -1.89936898,  -1.89936898,  -1.89936898,  -1.89936898,
                -1.04803053,  -1.04803053,  -1.04803053,  -1.04803053])]

boolean = True

for E_test, E_ref in zip(test_vals,ref_vals): 
    boolean &= np.allclose(E_test,E_ref)

print(f"Pass {boolean}")
